{"version":3,"sources":["utils/form-constraints.js","utils/get-validator.js","utils/storage.js","utils/session-manager.js","hooks/use-router.js","constants.js","layouts/default/index.js","layouts/auth/index.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["formConstraints","email","presence","message","password","c_password","equality","attribute","name","description","category","price","format","pattern","config","fullMessages","getValidator","contraints","values","errors","validate","mapValues","head","storage","set","key","value","localStorage","setItem","JSON","stringify","get","parse","getItem","remove","removeItem","clear","keys","sessionManager","this","token","logout","login","loginData","useRouter","useContext","__RouterContext","routesPath","HOME","LOGIN","palette","light","gradient","useStyles","makeStyles","root","alignItems","background","display","flexDirection","height","justifyContent","minHeight","DefaultLayout","props","route","classes","history","isLoggedIn","push","window","location","reload","Box","className","fallback","LinearProgress","renderRoutes","routes","backgroundImage","backgroundSize","path","component","exact","lazy","to","createBrowserHistory","App","CssBaseline","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d90bc81f.chunk.js","sourcesContent":["const formConstraints = {\n  email: {\n    presence: {\n      message: 'Insert an email'\n    },\n    email: {\n      message: 'Insert a valid email'\n    }\n  },\n  password: {\n    presence: {\n      message: 'Insert a password'\n    }\n  },\n  c_password: {\n    presence: {\n      message: 'Confirm your password'\n    },\n    equality: {\n      attribute: 'createPassword',\n      message: 'Password and their confirmation do not match'\n    }\n  },\n  name: {\n    presence: {\n      message: 'Insert a name'\n    }\n  },\n  description: {\n    presence: {\n      message: 'Insert a description'\n    }\n  },\n  category: {\n    presence: {\n      message: 'Insert a category'\n    }\n  },\n  price: {\n    presence: {\n      message: 'Insert a price'\n    },\n    format: {\n      pattern: '[0-9]+',\n      message: 'Insert only numbers'\n    }\n  }\n}\n\nexport default formConstraints\n","import validate from 'validate.js'\nimport { mapValues, head } from 'lodash'\n\nconst config = {\n  fullMessages: false\n}\n\nconst getValidator = contraints => {\n  const validator = values => {\n    const errors = validate(values, contraints, config)\n\n    return mapValues(errors, head)\n  }\n\n  return validator\n}\n\nexport default getValidator\n","const storage = {\n  set: (key, value) => {\n    localStorage.setItem(key, JSON.stringify(value))\n  },\n  get: key => {\n    return JSON.parse(localStorage.getItem(key))\n  },\n  remove: key => localStorage.removeItem(key),\n  clear: () => localStorage.clear()\n}\n\nexport default storage\n","import storage from './storage'\n\nconst keys = {\n  TOKEN: 'token'\n}\n\nconst sessionManager = {\n  get token() {\n    return storage.get(keys.TOKEN)\n  },\n  get isLoggedIn() {\n    return !!this.token\n  },\n  logout: () => storage.clear(),\n  login: loginData => {\n    const { token } = loginData\n\n    storage.set(keys.TOKEN, token)\n  }\n}\n\nexport default sessionManager\n","import { useContext } from 'react'\nimport { __RouterContext } from 'react-router'\n\nconst useRouter = () => useContext(__RouterContext)\n\nexport default useRouter\n","export const routesPath = {\n  HOME: 'product-list/home',\n  LOGIN: 'product-list/auth/login'\n}\n\nexport const palette = {\n  light: '#F4F4F4',\n  gradient: `linear-gradient(to right, #355c7d, #6c5b7b, #c06c84)`\n}\n","import React, { Suspense } from 'react'\nimport { Box, makeStyles, LinearProgress } from '@material-ui/core'\nimport { renderRoutes } from 'react-router-config'\nimport { useRouter } from 'hooks'\nimport { sessionManager } from 'utils'\nimport { palette, routesPath } from 'constants.js'\n\nconst useStyles = makeStyles({\n  root: {\n    alignItems: 'center',\n    background: palette.light,\n    display: 'flex',\n    flexDirection: 'column',\n    height: '100%',\n    justifyContent: 'center',\n    minHeight: '100vh'\n  }\n})\n\nconst DefaultLayout = props => {\n  const { route } = props\n\n  const classes = useStyles()\n\n  const { history } = useRouter()\n\n  const { isLoggedIn } = sessionManager\n\n  if (!isLoggedIn) {\n    sessionManager.logout()\n\n    history.push(routesPath.LOGIN)\n\n    window.location.reload()\n  }\n\n  return (\n    <Box className={classes.root}>\n      <Suspense fallback={<LinearProgress />}>\n        {renderRoutes(route.routes)}\n      </Suspense>\n    </Box>\n  )\n}\n\nexport default DefaultLayout\n","import React, { Suspense } from 'react'\nimport { Box, makeStyles, LinearProgress } from '@material-ui/core'\nimport { renderRoutes } from 'react-router-config'\nimport { palette } from 'constants.js'\n\nconst useStyles = makeStyles({\n  root: {\n    alignItems: 'flex-end',\n    backgroundImage: `url('https://res.cloudinary.com/kaypacha/image/upload/v1594920304/monochromatic/stories/avatar2.jpg')`,\n    backgroundSize: 'cover',\n    background: palette.gradient,\n    display: 'flex',\n    flexDirection: 'column',\n    height: '100vh',\n    justifyContent: 'center'\n  }\n})\n\nconst AuthLayout = props => {\n  const { route } = props\n\n  const classes = useStyles()\n\n  return (\n    <Box className={classes.root}>\n      <Suspense fallback={<LinearProgress />}>\n        {renderRoutes(route.routes)}\n      </Suspense>\n    </Box>\n  )\n}\n\nexport default AuthLayout\n","import React, { lazy } from 'react'\nimport { Redirect } from 'react-router-dom'\nimport { routesPath } from './constants'\nimport { DefaultLayout, AuthLayout } from './layouts'\n\nconst routes = [\n  // {\n  //   path: '/errors',\n  //   component: ErrorLayout,\n  //   routes: [\n  //     {\n  //       path: '/errors/error-401',\n  //       exact: true,\n  //       component: lazy(() => import('views/error-401'))\n  //     },\n  //     {\n  //       path: '/errors/error-404',\n  //       exact: true,\n  //       component: lazy(() => import('views/error-404'))\n  //     },\n  //     {\n  //       path: '/errors/error-500',\n  //       exact: true,\n  //       component: lazy(() => import('views/error-500'))\n  //     },\n  //     {\n  //       component: () => <Redirect to=\"/errors/error-404\" />\n  //     }\n  //   ]\n  // },\n  {\n    path: '/auth',\n    component: AuthLayout,\n    routes: [\n      {\n        path: routesPath.LOGIN,\n        exact: true,\n        component: lazy(() => import('views/login'))\n      }\n    ]\n  },\n  {\n    route: '*',\n    component: DefaultLayout,\n    routes: [\n      {\n        path: 'product-list/',\n        exact: true,\n        component: () => <Redirect to={routesPath.HOME} />\n      },\n      {\n        path: routesPath.HOME,\n        exact: true,\n        component: lazy(() => import('views/home'))\n      }\n    ]\n  }\n]\n\nexport default routes\n","import React from 'react'\nimport { Router } from 'react-router-dom'\nimport { createBrowserHistory } from 'history'\nimport { CssBaseline } from '@material-ui/core'\nimport { renderRoutes } from 'react-router-config'\n\nimport routes from './routes'\n\nconst history = createBrowserHistory()\n\nconst App = () => {\n  return (\n    <>\n      <CssBaseline />\n      <Router history={history}>{renderRoutes(routes)}</Router>\n    </>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\nserviceWorker.unregister()\n"],"sourceRoot":""}